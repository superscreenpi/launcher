{"version":3,"sources":["images/settings.png","store/settings/actions.ts","components/AppList.tsx","store/settings/state.ts","store/settings/reducers.ts","store/apps/actions.ts","store/apps/state.ts","store/apps/reducers.ts","store/index.ts","views/HomeView.tsx","components/Container.tsx","components/Box.tsx","components/TextField.tsx","views/SettingsView.tsx","views/settings/AboutView.tsx","components/Time.tsx","views/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Types","AppList","apps","className","map","id","name","iconUrl","openUrl","key","href","src","alt","initialState","deviceName","settings","settingsState","appsState","rootReducer","combineReducers","state","action","type","SET_SETTING","data","ADD_APP","useGlobal","selector","useSelector","HomeView","Container","children","Box","TextField","value","icon","label","onChange","e","target","SettingsView","dispatch","useDispatch","to","setting","AboutView","version","React","setCurrentTime","DateTime","local","toLocaleString","TIME_SIMPLE","Time","useState","time","setTime","useEffect","interval","setInterval","clearInterval","NavBar","onClick","window","require","electron","ipcRenderer","send","App","exact","path","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","persist","resize","vh","innerHeight","document","documentElement","style","setProperty","addEventListener","ReactDOM","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e675508.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/settings.4934bd80.png\";","import { SettingsState } from './state';\n\nexport type Action = ReturnType<typeof setSetting>;\n\nexport enum Types {\n  SET_SETTING = 'SET_SETTING',\n}\n\nexport interface SetSettingAction {\n  type: Types.SET_SETTING;\n  data: Partial<SettingsState>;\n}\n\nexport function setSetting<K extends keyof SettingsState>(setting: K, value: SettingsState[K]): SetSettingAction {\n  return {\n    type: Types.SET_SETTING,\n    data: { [setting]: value },\n  };\n}\n","import React from 'react';\nimport { App } from '../store/apps/state';\n\nexport interface Props {\n  apps: App[];\n}\n\nexport const AppList: React.FC<Props> = ({ apps }) => {\n  return (\n    <div className=\"app-list\">\n      <div className=\"apps\">\n        {apps.map(({ id, name, iconUrl, openUrl }) => (\n          <a key={id} className=\"app-badge\" href={openUrl}>\n            <img src={iconUrl} alt={name} />\n            <span className=\"name\">{name}</span>\n          </a>\n        ))}\n      </div>\n    </div>\n  );\n};\n","export interface SettingsState {\n  deviceName: string;\n}\n\nexport const initialState: SettingsState = {\n  deviceName: 'SuperScreenPi',\n};\n","import { initialState, SettingsState } from './state';\nimport { Action, Types } from './actions';\n\nexport const settingsReducer = (state = initialState, action: Action): SettingsState => {\n  switch (action.type) {\n    case Types.SET_SETTING:\n      return { ...state, ...action.data };\n    default:\n      return state;\n  }\n};\n","import { App, AppsState } from './state';\n\nexport type Action = ReturnType<typeof addApp>;\n\nexport enum Types {\n  ADD_APP = 'ADD_APP',\n}\n\nexport interface AddAppAction {\n  type: Types.ADD_APP;\n  data: App;\n}\n\nexport function addApp<K extends keyof AppsState>(app: App): AddAppAction {\n  return {\n    type: Types.ADD_APP,\n    data: app,\n  };\n}\n","export interface App {\n  id: string;\n  name: string;\n  openUrl: string;\n  // todo: at some point, this should be a list of icons and we should select the correct one\n  iconUrl: string;\n}\n\nexport interface AppsState {\n  apps: App[];\n}\n\nexport const initialState: AppsState = {\n  apps: [\n    {\n      id: 'io.chapp.dino',\n      name: 'Dino',\n      openUrl: 'https://www.chapp.io/dino',\n      iconUrl: 'https://www.chapp.io/dino/logo512.png',\n    },\n    {\n      id: 'dev.chrisdiana.calculator',\n      name: 'Calculator',\n      openUrl: 'https://chrisdiana.dev/pwa-calculator/',\n      iconUrl: 'https://chrisdiana.dev/pwa-calculator/img/icons/android-chrome-512x512.png',\n    },\n    {\n      id: 'dev.schmuckli.wallet',\n      name: 'Wallet',\n      openUrl: 'https://wallet.schmuckli.dev/',\n      iconUrl: 'https://wallet.schmuckli.dev/android-icon-512x512.png',\n    },\n    {\n      id: 'com.spotify.open',\n      name: 'Spotify',\n      openUrl: 'https://open.spotify.com/?utm_source=pwa_install',\n      iconUrl: 'https://open.scdn.co/cdn/images/icons/Spotify_512.49a0bf03.png',\n    },\n    {\n      id: 'com.littlealchemy2',\n      name: 'Little Alchemy 2',\n      openUrl: 'https://littlealchemy2.com/?utm_source=homescreen',\n      iconUrl: 'https://littlealchemy2.com/public/icons/icon-512x512.png',\n    },\n    {\n      id: 'io.github.maxwellito.breaklock',\n      name: 'BreakLock',\n      openUrl: 'https://maxwellito.github.io/breaklock/?utm_source=homescreen',\n      iconUrl: 'https://maxwellito.github.io/breaklock/assets/icons/icon-256x256.png',\n    },\n    {\n      id: 'com.aliexpress.store',\n      name: 'AliExpress',\n      openUrl: 'https://m.nl.aliexpress.com',\n      iconUrl: 'https://ae01.alicdn.com/kf/Hf6ec66fcde824896a0e75be02021d64e5.png',\n    },\n  ],\n};\n","import { AppsState, initialState } from './state';\nimport { Action, Types } from './actions';\n\nexport const appsReducer = (state = initialState, action: Action): AppsState => {\n  switch (action.type) {\n    case Types.ADD_APP:\n      return { ...state, apps: [...state.apps, action.data] };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { settingsReducer } from './settings/reducers';\nimport { useSelector } from 'react-redux';\nimport { appsReducer } from './apps/reducers';\nimport { initialState as settingsState } from './settings/state';\nimport { initialState as appsState } from './apps/state';\n\nexport const initialState = {\n  settings: settingsState,\n  apps: appsState,\n};\n\nexport type GlobalState = typeof initialState;\n\nexport const rootReducer = combineReducers({ settings: settingsReducer, apps: appsReducer });\n\nexport function useGlobal<T>(selector: (state: GlobalState) => T): T {\n  return useSelector<GlobalState, T>(selector);\n}\n","import React from 'react';\nimport { AppList } from '../components/AppList';\nimport { useGlobal } from '../store';\nimport settings from '../images/settings.png';\n\nexport const HomeView: React.FC = () => {\n  const apps = useGlobal((state) => state.apps.apps);\n\n  return (\n    <>\n      <AppList\n        apps={[\n          ...apps,\n          {\n            id: 'io.github.superscreen.launcher.settings',\n            name: 'Settings',\n            openUrl: '/launcher/#/settings',\n            iconUrl: settings,\n          },\n        ]}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nexport const Container: React.FC = ({ children }) => <div className=\"container\">{children}</div>;\n","import React from 'react';\n\nexport const Box: React.FC = ({ children }) => <div className=\"box\">{children}</div>;\n","import React from 'react';\n\nexport interface Props {\n  icon: string;\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport const TextField: React.FC<Props> = ({ value, icon, label, onChange }) => {\n  return (\n    <div className=\"field\">\n      <label>\n        <i className={`fas fa-${icon}`} />\n        {label}\n      </label>\n      <input type=\"text\" value={value} onChange={(e): void => onChange(e.target.value)} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useGlobal } from '../store';\nimport { Container } from '../components/Container';\nimport { Box } from '../components/Box';\nimport { Link } from 'react-router-dom';\nimport { TextField } from '../components/TextField';\nimport { useDispatch } from 'react-redux';\nimport { setSetting } from '../store/settings/actions';\n\nexport const SettingsView: React.FC = () => {\n  const { deviceName } = useGlobal((state) => state.settings);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Container>\n        <Link to=\"/\" className=\"round button\">\n          <i className=\"fas fa-arrow-left\" />\n        </Link>\n      </Container>\n      <Container>\n        <Box>\n          <TextField\n            icon=\"user-tag\"\n            label=\"Device Name\"\n            value={deviceName}\n            onChange={(name): void => {\n              dispatch(setSetting('deviceName', name));\n            }}\n          />\n        </Box>\n      </Container>\n      <Container>\n        <Box>\n          <Link to=\"/settings/about\" className=\"field\">\n            <label>\n              <i className=\"fas fa-question-circle\" />\n              About\n            </label>\n          </Link>\n        </Box>\n      </Container>\n    </>\n  );\n};\n","import React from 'react';\nimport { Container } from '../../components/Container';\nimport { Box } from '../../components/Box';\nimport { version } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport preval from 'preval.macro';\n\nconst buildTime = preval`module.exports = new Date().toLocaleString();`;\n\nexport const AboutView: React.FC = () => {\n  return (\n    <>\n      <Container>\n        <Link to=\"/settings\" className=\"round button\">\n          <i className=\"fas fa-arrow-left\" />\n        </Link>\n      </Container>\n      <Container>\n        <Box>\n          <div className=\"field\">\n            <label>\n              <i className=\"fas fa-code-branch\" />\n              SuperScreenPi Launcher v{version}\n            </label>\n          </div>\n          <div className=\"field\">\n            <label>\n              <i className=\"fas fa-calendar\" />\n              Release {buildTime}\n            </label>\n          </div>\n          <div className=\"field\">\n            <label>\n              <i className=\"fab fa-react\" />\n              React v{React.version}\n            </label>\n          </div>\n        </Box>\n      </Container>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { DateTime } from 'luxon';\n\nfunction setCurrentTime(): string {\n  return DateTime.local().toLocaleString(DateTime.TIME_SIMPLE) || '';\n}\n\nexport const Time: React.FC = () => {\n  const [time, setTime] = useState(setCurrentTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(setCurrentTime());\n    }, 1000);\n    return (): void => clearInterval(interval);\n  }, []);\n\n  return <span className=\"time\">{time}</span>;\n};\n","import React from 'react';\nimport { Time } from '../components/Time';\n\nexport const NavBar: React.FC = () => (\n  <div className=\"navbar\">\n    <div className=\"icon-bar\">\n      <button\n        className=\"link\"\n        onClick={(): void => {\n          if (!window.require) {\n            return;\n          }\n          const electron = window.require('electron');\n          if (!electron) {\n            return;\n          }\n          electron.ipcRenderer.send('navbar', 'home');\n        }}\n      >\n        <i className=\"fas fa-home\" />\n      </button>\n    </div>\n    <Time />\n  </div>\n);\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { HomeView } from './views/HomeView';\nimport { SettingsView } from './views/SettingsView';\nimport { AboutView } from './views/settings/AboutView';\nimport { NavBar } from './views/NavBar';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/home\" component={HomeView} />\n        <Route exact path=\"/settings\" component={SettingsView} />\n        <Route exact path=\"/navbar\" component={NavBar} />\n        <Route exact path=\"/settings/about\" component={AboutView} />\n        <Redirect to=\"/home\" />\n      </Switch>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration): void => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.scss';\nimport { HashRouter } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { initialState, rootReducer } from './store';\nimport { persist } from '@superscreenpi/redux-persist-localstorage';\n\nconst store = createStore(rootReducer, initialState, persist('launcher/state', ['apps']));\n\n// maintain the correct viewport height\nfunction resize(): void {\n  const vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n}\n\nwindow.addEventListener('resize', resize);\nwindow.addEventListener('orientationchange', resize);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}